import struct

# ----------------------------------- #
# テキストから数値データへの変換例    #
# ----------------------------------- #
# 元のテキストデータの定義
raw_text = "00B 12 34 56 78 98 76 54 32"

# テキストデータをスペース区切りでリスト化する
sep_text = raw_text.split(" ")

# 左側4バイト分の文字列を結合する
l_text =  "".join(sep_text[1:5])
# 右側4バイト分の文字列を結合する
r_text =  "".join(sep_text[5:9])

# 結合した文字列を数値に変換する
l_data = int(l_text, 16)
r_data = int(r_text, 16)

# ----------------------------------- #
# 任意のビット位置のデータ取り出し例  #
# ----------------------------------- #
# 左側4バイトから、0-3ビット目を取り出す
l_0_3bit = l_data & 0x0000000F
# 8が出力される
print(l_0_3bit)

# 右側4バイトから、4-7ビット目を取り出す
r_4_7bit = (r_data >> 4) & 0x0000000F
# 3が出力される
print(r_4_7bit)

# 左側4バイトから、24-31ビット目を取り出す
l_24_31bit = (l_data >> 24) & 0x000000FF
# 18(0x12)が出力される
print(l_24_31bit)

# 右側4バイトから、9ビット目を取り出す
r_9bit = (r_data >> 9) & 0x00000001
# 0が出力される
print(r_9bit)


# ------------------------------------- #
# 浮動小数点の内部表現から数値への変換  #
# ------------------------------------- #
# 元のテキストデータの定義
raw_text = "00A 3E 00 00 00 46 9A B0 00"

# テキストデータをスペース区切りでリスト化する
sep_text = raw_text.split(" ")

# 左側4バイト分の文字列を結合する
l_text =  "".join(sep_text[1:5])
# 右側4バイト分の文字列を結合する
r_text =  "".join(sep_text[5:9])

# 結合した文字列を数値に変換する
l_data = int(l_text, 16)
r_data = int(r_text, 16)

# 数値データをリトルエンディアンでバイト列化する
l_data_bin = l_data.to_bytes(4, "little")
r_data_bin = r_data.to_bytes(4, "little")

# バイト列を浮動小数点数として解釈して数値に変換する
l_data_fl = struct.unpack("<f", l_data_bin)
r_data_fl = struct.unpack("<f", r_data_bin)

# 0.125、19800.0 と表示される
print(l_data_fl[0])
print(r_data_fl[0])